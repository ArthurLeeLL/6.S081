1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
- Registers a0 to a6 contain arguments, and a2 holds 13 as it's the third argument.


2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
-  26:	45b1                	li	a1,12
- The line above is the inline formation of the call of function f and g.


3. At what address is the function printf located?
// - At the line #34, address of the function printf is (5430 + current value of pc).
- 0000000000000630


4. What value is in the register ra just after the jalr to printf in main?
- Before line , the value should be 30, but I personally think that the value could be 38 as it will go back to this instruction after calling printf.


5. Run the following code.

   	unsigned int i = 0x00646c72;
   	printf("H%x Wo%s", 57616, &i);

   What is the output? Here's an ASCII table that maps bytes to characters.
   The output depends on that fact that the RISC-V is little-endian.
   If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

   Here's a description of little- and big-endian and a more whimsical description.

- The output is "HE110 World", and if you want to get the same result with big-endian, the value of i should be 0x726c6400.
- It depends on the compiler, if the compiler decides to use inline value for 57616, there is no necessary to change the value, because the little- and big-endian are used to store value in memory.

6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);

- It depends on the value of a2 which has been stored or set by someone before calling the current function (as the function itself doesn't set the value).